#!/bin/bash

MONGO_ROOT_PWD_FILE=/etc/yunohost/mongo
MONGO_ROOT_USER=mongoadmin
MONGO_VERSION=9.6
MONGO_SERVICENAME_STRETCH="mongodb"
MONGO_SERVICENAME_BUSTER="mongod"
MONGO_DEPENDENCIES_STRETCH="mongodb mongodb-server mongo-tools"
MONGO_DEPENDENCIES_BUSTER="mongodb-org mongodb-org-server mongodb-org-tools"
MONGO_CONFIG_STRETCH="/etc/mongodb.conf"
MONGO_CONFIG_BUSTER="/etc/mongod.conf"
MONGO_REPO_BUSTER="deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main"
MONGO_KEY_BUSTER="https://www.mongodb.org/static/pgp/server-4.2.asc"

# Execute a mongo command
#
# example: ynh_mongo_exec_as --command='db.getMongo().getDBNames().indexOf("wekan")'
# example: ynh_mongo_exec_as --command="db.getMongo().getDBNames().indexOf(\"wekan\")"
#
# usage: ynh_mongo_exec_as [--user=user] [--password=password] [--authenticationdatabase=authenticationdatabase] [--database=database] [--host=host] [--port=port] --command="command"
# | arg: -u, --user=        - the user name to connect as
# | arg: -p, --password=    - the user password
# | arg: -d, --authenticationdatabase=    - the authenticationdatabase to connect to
# | arg: -d, --database=    - the database to connect to
# | arg: -h, --host=        - the host to connect to
# | arg: -P, --port=        - the port to connect to
# | arg: -c, --command=     - the command to execute
# | arg: -e, --eval         - evaluate instead of execute the command.
#
#
ynh_mongo_exec_as() {
    # Declare an array to define the options of this helper.
    local legacy_args=upadhPc
    local -A args_array=( [u]=user= [p]=password= [a]=authenticationdatabase= [d]=database= [h]=host= [P]=port= [c]=command= [e]=eval)
    local user
    local password
    local authenticationdatabase
    local database
    local host
    local port
    local command
    local eval
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    user="${user:-}"
    password="${password:-}"
    authenticationdatabase="${authenticationdatabase:-}"
    database="${database:-}"
    host="${host:-}"
    port="${port:-}"
    eval=${eval:-0}

    # If user is provided
    if [ -n "$user" ]
    then
        user="--username=$user"
        
        # If password is provided
        if [ -n "$password" ]
        then
            password="--password=$password"
        fi

        # If authenticationdatabase is provided
        if [ -n "$authenticationdatabase" ]
        then
            authenticationdatabase="--authenticationDatabase=$authenticationdatabase"
        else
            authenticationdatabase="--authenticationDatabase=admin"
        fi
    else
        password=""
        authenticationdatabase=""
    fi

    # If database is provided
    if [ -n "$database" ]
    then
        database="use $database"
    else
        database=""
    fi

    # If host is provided
    if [ -n "$host" ]
    then
        host="--host=$host"
    fi

    # If host is provided
    if [ -n "$port" ]
    then
        port="--port=$port"
    fi

    # If eval is provided
    if [ $eval -eq 0 ]
    then
        mongo --quiet $user $password $authenticationdatabase $host $port <<EOF
$database
${command}
quit()
EOF
    else
        mongo --quiet $user $password $authenticationdatabase $host $port --eval="$command"
    fi

}

# Evaluate a mongo command as root user
#
# usage: ynh_mongo_exec_as_root [--database=database] --command="command"
# | arg: -d, --database=    - the database to connect to
# | arg: -c, --command=     - the command to evaluate
# | arg: -e, --eval         - evaluate instead of execute the command.
#
#
ynh_mongo_exec_as_root() {
    # Declare an array to define the options of this helper.
    local legacy_args=cde
    local -A args_array=([d]=database= [c]=command= [e]=eval)
    local command
    local database
    local eval
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"
    eval=${eval:-0}

    # If eval is not provided
    if [ $eval -eq 0 ]
    then
        eval=""
    else
        eval="--eval"
    fi

    ynh_mongo_exec_as --user="$MONGO_ROOT_USER" --password="$(cat $MONGO_ROOT_PWD_FILE)" --authenticationdatabase=admin --database="$database" --command="$command" $eval
}

# Drop a database
#
# [internal]
#
# If you intend to drop the database *and* the associated user,
# consider using ynh_mongo_remove_db instead.
#
# usage: ynh_mongo_drop_db --database=database
# | arg: -d, --database=    - the database name to dump
#
#
ynh_mongo_drop_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=( [d]=database= )
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    ynh_mongo_exec_as_root --database="$database" --command='db.runCommand({dropDatabase: 1})'
}

# Dump a database
#
# example: ynh_mongo_dump_db --database=wekan > ./dump.bson
#
# usage: ynh_mongo_dump_db --database=database
# | arg: -d, --database=    - the database name to dump
# | ret: the mongodump output
#
#
ynh_mongo_dump_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=( [d]=database= )
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    mongodump --quiet --db="$database" --archive
}

# Create a user
#
# [internal]
#
# usage: ynh_mongo_create_user --db_user=user --db_pwd=pwd --db_name=name
# | arg: -u, --db_user= - the user to grant privilegies
# | arg: -p, --db_pwd= - the password to identify user by
# | arg: -n, --db_name=- the database name to grant privilegies
#
#
ynh_mongo_create_user() {
    # Declare an array to define the options of this helper.
    local legacy_args=unp
    local -A args_array=( [u]=db_user= [n]=db_name= [p]=db_pwd= )
    local db_user
    local db_name
    local db_pwd
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    # Create the user
    ynh_mongo_exec_as_root --database="$db_name" --command='db.createUser( { user: "'${db_user}'", pwd: "'${db_pwd}'", roles: [ { role: "readWrite", db: "'${db_name}'" } ] } );'
    # Set the user as admin of the db
    ynh_mongo_exec_as_root --database="$db_name" --command='db.grantRolesToUser("'${db_user}'",[{ role: "clusterMonitor", db: "admin" }]);'
}

# Check if a mongo database exists
#
# usage: ynh_mongo_database_exists --database=database
# | arg: -d, --database=    - the database for which to check existence
# | exit: Return 1 if the database doesn't exist, 0 otherwise
#
#
ynh_mongo_database_exists() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=([d]=database=)
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if [ $(ynh_mongo_exec_as_root --command='db.getMongo().getDBNames().indexOf("'${database}'")' --eval) -lt 0 ]
    then
        return 1
    else
        return 0
    fi
}

# Restore a database
#
# example: ynh_mongo_restore_db --database=wekan < ./dump.bson
#
# usage: ynh_mongo_restore_db --database=database
# | arg: -d, --database=    - the database name to restore
#
#
ynh_mongo_restore_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=( [d]=database= )
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    mongorestore --quiet --db="$database" --archive
}

# Drop a user
#
# [internal]
#
# usage: ynh_mongo_drop_user --db_user=user --db_name=name
# | arg: user - the user name to drop
# | arg: -n, --db_name=     - Name of the database
#
#
ynh_mongo_drop_user() {
    # Declare an array to define the options of this helper.
    local legacy_args=un
    local -A args_array=( [u]=db_user= [n]=db_name= )
    local db_user
    local db_name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    ynh_mongo_exec_as_root --database="$db_name" --command='db.dropUser("'$db_user'", {w: "majority", wtimeout: 5000})'
}

# Create a database, an user and its password. Then store the password in the app's config
#
# usage: ynh_mongo_setup_db --db_user=user --db_name=name [--db_pwd=pwd]
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
# | arg: -p, --db_pwd=      - Password of the database. If not provided, a password will be generated
#
# After executing this helper, the password of the created database will be available in $db_pwd
# It will also be stored as "mongopwd" into the app settings.
#
#
ynh_mongo_setup_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=unp
    local -A args_array=( [u]=db_user= [n]=db_name= [p]=db_pwd= )
    local db_user
    local db_name
    local db_pwd=""
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    local new_db_pwd=$(ynh_string_random) # Generate a random password
    # If $db_pwd is not provided, use new_db_pwd instead for db_pwd
    db_pwd="${db_pwd:-$new_db_pwd}"
    
    ynh_mongo_create_user --db_user="$db_user" --db_pwd="$db_pwd" --db_name="$db_name"
    
    ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd # Store the password in the app's config
}

# Remove a database if it exists, and the associated user
#
# usage: ynh_mongo_remove_db --db_user=user --db_name=name
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
#
#
ynh_mongo_remove_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=un
    local -A args_array=( [u]=db_user= [n]=db_name= )
    local db_user
    local db_name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if ynh_mongo_database_exists --database=$db_name; then
        # Check if the database exists
        ynh_mongo_drop_db --database=$db_name  # Remove the database
    else
        ynh_print_warn --message="Database $db_name not found"
    fi

    # Remove mongo user
    ynh_mongo_drop_user --db_name=$db_name --db_user=$db_user
}

# Create a master password and set up global settings
# It also make sure that MongoDB is installed and running
# Please always call this script in install and restore scripts
#
# provide a variable:
# - mongodb_servicename: Representing the name of the mongodb service
#
# usage: ynh_mongo_test_if_first_run
#
#
ynh_mongo_test_if_first_run() {

    # Make sure Mongodb is indeed installed
    dpkg --list | grep -q "ii  mongodb.*server" || ynh_die "postgresql-$mongo_VERSION is not installed !?"

    # Define Mongo Service Name
    if [ "$(lsb_release --codename --short)" = "buster" ]; then
        MONGODB_SERVICENAME=$MONGO_SERVICENAME_BUSTER
    else
        MONGODB_SERVICENAME=$MONGO_SERVICENAME_STRETCH
    fi
    mongodb_servicename=$MONGODB_SERVICENAME
    # Make sure MongoDB is started and enabled
    systemctl is-enabled $MONGODB_SERVICENAME -q || systemctl enable $MONGODB_SERVICENAME --quiet
    systemctl is-active $MONGODB_SERVICENAME -q || ynh_systemd_action --service_name=$MONGODB_SERVICENAME --action=restart

    # If this is the very first time, we define the root password
    # and configure a few things
    if [ ! -f "$MONGO_ROOT_PWD_FILE" ]
    then
        local mongo_root_password="$(ynh_string_random)"
        echo "$mongo_root_password" >$MONGO_ROOT_PWD_FILE
        sleep 10
        ynh_mongo_exec_as --database=admin --command='db.createUser( { user: "'${MONGO_ROOT_USER}'", pwd: "'${mongo_root_password}'", roles: [ { role: "userAdminAnyDatabase", db: "admin" } ] } );'

        ynh_systemd_action --service_name=$MONGODB_SERVICENAME --action=stop
        # Enable access control
        if [ "$(lsb_release --codename --short)" = "buster" ]; then
            ynh_replace_string --match_string="#security:" --replace_string="security:\n  authorization: enabled" --target_file="$MONGO_CONFIG_BUSTER"
        else
            ynh_replace_string --match_string="#auth = true" --replace_string="auth = true" --target_file="$MONGO_CONFIG_STRETCH"
        fi
        ynh_systemd_action --service_name=$MONGODB_SERVICENAME --action=start
        sleep 10

        # Integrate MongoDB service in yunohost
        yunohost service add $MONGODB_SERVICENAME --description "MongoDB daemon" --log "/var/log/mongodb/$MONGODB_SERVICENAME.log"
    fi
}

# Install MongoDB
#
# usage: ynh_mongo_install
#
#
ynh_mongo_install() {
    # Define Mongo Service Name
    if [ "$(lsb_release --codename --short)" = "buster" ]; then
        ynh_install_extra_app_dependencies --repo="$MONGO_REPO_BUSTER" --package="$MONGO_DEPENDENCIES_BUSTER" --key="$MONGO_KEY_BUSTER"
    else
        ynh_install_app_dependencies $MONGO_DEPENDENCIES_STRETCH
    fi   
}

# Remove MongoDB
# Only remove the MongoDB service integration in YunoHost for now
# if MongoDB package as been removed
#
# usage: ynh_mongo_remove
#
#
ynh_mongo_remove() {
    # Only remove the mongodb service if it is not installed.
    if ! ynh_package_is_installed --package="mongodb*"
    then
        yunohost service remove $MONGODB_SERVICENAME
        # ynh_secure_remove --file=$MONGO_ROOT_PWD_FILE
    fi
}